/**
 *@file
 *@brief I3SumGenerator
 *       A class for generating the sum of several random numbers which all have
 *       the same probability density, like the pulse-heights generated by several
 *       simultaneous PEs. At initialisation a set of vectors (each for a different 
 *       number of terms in the sum) is created. Such a vector holds the
 *       the values of the sum which corresponds to equally spaced value of the 
 *       cumulative, and can be used to generate a value for the sum very quickly.
 *       When the number of terms exceeds a specified value a gaussian distribution
 *       is generated instead.
 *
 *@author Klas Hultqvist
 *(c) the IceCube Collaboration
 *
 */
#ifndef I3SUM_GENERATOR_H
#define I3SUM_GENERATOR_H
#include <vector>
#include <gsl/gsl_rng.h>
#include <gsl/gsl_randist.h>
  class I3SumGenerator {
 public:
  /**
    *@brief  Construct an uninitialised SumGenerator. Will not work before it's 
    * initialised.
    */
  I3SumGenerator(){};
  /**
   *@brief Construct a SumGenerator
   *@param r            Pointer to random number service
   *@param fun          Pointer to probability density function
   *@param xlo          Low edge of interval where fun is defined
   *@param xhi          High edge
   *@param nbins        Number of bins to calculate fun in
   *@param switchGauss  The minimum number of terms for which gaussian generation
   *                    will be enabled 
   */
  I3SumGenerator(I3RandomServicePtr r, double (*fun)(double),double xlo, double xhi, int nbins, int switchGauss);
  /**
   *@brief Generate the value of a sum of random numbers 
   *@param terms   Number of terms in the sum
   */
  double Generate(int terms);
  /**
   *@brief      Initialise a SumGenerator
   *@param r            Pointer to random number service
   *@param fun          Pointer to probability density function
   *@param xlo          Low edge of interval where fun is defined
   *@param xhi          High edge
   *@param nbins        Number of bins to calculate fun in
   *@param switchGauss  The minimum number of terms for which gaussian generation
   *                    will be enabled 
   */
  void Initialise(I3RandomServicePtr r, double (*fun)(double),double xlo, double xhi, int nbins, int switchGauss);
 private:
  /**
   * Lowest number of terms for which gaussian generation is used 
   */
  int switchGauss_;
  /**
   * Number of bins (same in sum value and probability)
   */
  int nBins_;
  /**
   * Min and max of single term
   */
  double xLo_,xHi_;
  /**
   * Expectation value and standard deviation for single term
   */
  double expectVal_,stdDev_;
  /**
   * Vector of sum values for different cumulative probabilities
   */
  vector< vector<double> > X_;
  /**
   * Random number generator
   */
  I3RandomServicePtr random_;
};
#endif
